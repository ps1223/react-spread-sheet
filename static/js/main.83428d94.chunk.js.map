{"version":3,"sources":["components/Cell.jsx","components/AddNew.jsx","components/Row.jsx","utils/Utils.js","container/SpreadSheet.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","row","column","event","this","props","onChange","target","value","nextProps","nextState","nextContext","isSelected","showCopied","isEditable","isHeader","onClick","onMouseEnter","style","selectedStyle","selectedCellStyle","copiedStyle","copiedCellStyle","headerStyle","headerCellStyle","cellStyle","baseStyle","onMouseDown","bind","autoFocus","spanStyle","React","Component","border","height","width","cursor","textAlign","display","overflow","textOverflow","whiteSpace","maxWidth","backgroundColor","textTransform","AddNew","defaultStyle","onMouseUp","color","fontWeight","Row","rowIndex","selectedCell","editableCell","onAdd","selectedRows","sort","a","b","selectedColumns","map","columnLetter","n","ordA","charCodeAt","len","s","String","fromCharCode","Math","floor","colName","Spreadsheet","sheet","Array","fill","state","clipboard","document","addEventListener","e","handleKeyEvents","data","setState","buttons","preventDefault","shiftKey","type","push","forEach","key","ctrlKey","length","sortSelectRows","sortSelectColumns","i","j","pasteData","isSelectionMode","targetRow","targetColumn","newRowsRequired","newColumnsRequired","increaseSpreadSheet","count","addColumn","index","addRow","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.83428d94.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Cell extends React.Component {\n\n    onChange(row, column, event) {\n        this.props.onChange(row, column, event.target.value);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return this.props.value !== nextProps.value ||\n                this.props.isSelected !== nextProps.isSelected ||\n                this.props.showCopied !== nextProps.showCopied ||\n                this.props.isEditable !== nextProps.isEditable;\n    }\n\n    render() {\n        const { row, column, value, isHeader, isSelected, isEditable, showCopied, onClick, onMouseEnter, style } = this.props;\n        const selectedStyle = isSelected ? selectedCellStyle : {};\n        const copiedStyle = showCopied && isSelected ? copiedCellStyle : {};\n        const headerStyle = isHeader ? headerCellStyle : {};\n        const cellStyle = {...baseStyle, ...selectedStyle, ...copiedStyle, ...headerStyle, ...style};\n        return <div style={cellStyle}\n                    onMouseDown={onClick.bind(null, row, column)}\n                    onMouseEnter={onMouseEnter.bind(null, row, column)}\n                    onClick={onClick.bind(null, row, column)}>\n            {\n                isEditable ?\n                    <input value={value}\n                           autoFocus\n                           onChange={this.onChange.bind(this, row, column)} />\n                    :\n                    <span style={spanStyle}>{value}</span>\n            }\n        </div>\n    }\n\n}\n\nconst copiedCellStyle = {\n    border: '2px dotted green',\n    height: 23,\n    width: 98\n}\n\nconst selectedCellStyle = {\n    border: '2px solid green',\n    height: 23,\n    width: 98\n}\n\nconst baseStyle = {\n    width: 100,\n    height: 25,\n    cursor: 'cell',\n    textAlign: 'center',\n    border: '1px solid #888'\n}\n\nconst spanStyle = {\n    display: 'block',\n    overflow: 'hidden',\n    textOverflow: 'clip',\n    whiteSpace: 'nowrap',\n    maxWidth: '100%'\n}\n\nconst headerCellStyle = {\n    backgroundColor: '#CCC',\n    textTransform: 'uppercase'\n}\n","import React from 'react';\nimport Cell from './Cell';\n\nexport default class AddNew extends React.Component {\n\n    render() {\n        return <Cell value=\"+\"\n                     isHeader\n                     style={defaultStyle}\n                     onMouseDown={() => {}}\n                     onMouseUp={() => {}}\n                     onMouseEnter={() => {}}\n                     onClick={this.props.onClick} />\n\n    }\n\n}\n\nconst defaultStyle = {\n    width: 30,\n    color: 'green',\n    backgroundColor: 'white',\n    border: '1px solid',\n    fontWeight: 'bold',\n    cursor: 'pointer'\n}\n","import React from 'react';\nimport Cell from './Cell';\nimport {colName} from '../utils/Utils';\nimport AddNew from './AddNew';\n\nexport default class Row extends React.Component {\n\n    render() {\n        const { row, rowIndex, isHeader, selectedCell, editableCell, showCopied, onAdd, onChange, onClick, onMouseEnter } = this.props\n        const selectedRows = [...selectedCell.row].sort((a, b) => a - b);\n        const selectedColumns = [...selectedCell.column].sort((a, b) => a - b);\n        return <div style={{display: 'flex'}}>\n            <Cell isHeader\n                  style={{width: 30}}\n                  onMouseEnter={() => {}}\n                  value={isHeader ? ' ' : rowIndex + 1}\n                  onClick={() => {}} />\n            {\n                row.map((value, column) => {\n                    const columnLetter = colName(column);\n                    if(isHeader) {\n                        value = columnLetter;\n                    }\n                    const isSelected = (selectedRows[0] <= rowIndex && selectedRows[1] >= rowIndex) && (selectedColumns[0] <= column && selectedColumns[1] >= column);\n                    const isEditable = editableCell && editableCell.row === rowIndex && editableCell.column === column;\n                    return <Cell key={`${columnLetter}${row}`}\n                                 row={rowIndex}\n                                 column={column}\n                                 isHeader={isHeader}\n                                 isSelected={isSelected}\n                                 showCopied={showCopied}\n                                 isEditable={isEditable}\n                                 onChange={onChange}\n                                 onMouseEnter={onMouseEnter}\n                                 onClick={onClick}\n                                 value={value} />\n                })\n            }\n            {\n                isHeader && <AddNew onClick={onAdd} />\n            }\n        </div>\n    }\n\n}\n","\nexport function colName(n) {\n    const ordA = 'a'.charCodeAt(0);\n    const ordZ = 'z'.charCodeAt(0);\n    const len = ordZ - ordA + 1;\n\n    let s = \"\";\n    while(n >= 0) {\n        s = String.fromCharCode(n % len + ordA) + s;\n        n = Math.floor(n / len) - 1;\n    }\n    return s;\n}\n","import React from 'react';\nimport Row from '../components/Row';\nimport AddNew from '../components/AddNew';\n\nexport default class Spreadsheet extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const sheet = new Array(props.row).fill(null).map(row => new Array(props.column).fill(\"\"));\n        this.state = {\n            row: props.row,\n            column: props.column,\n            clipboard: null,\n            selectedCell: {\n                row: [],\n                column: []\n            },\n            showCopied: false,\n            editableCell: {\n                row: null,\n                column: null\n            },\n            sheet: sheet\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', e => {\n            this.handleKeyEvents(e);\n        });\n    }\n\n    onChange(row, column, data) {\n        const sheet = [...this.state.sheet];\n        sheet[row][column] = data;\n        this.setState({sheet});\n    }\n\n    onMouseEnter(row, column, event) {\n        if(event.buttons === 1) {\n            this.onClick(row, column, event);\n        }\n    }\n\n    onClick(row, column, event) {\n        event.preventDefault();\n        const { editableCell, selectedCell } = this.state;\n        if(event.shiftKey || (event.buttons === 1 && event.type !== \"mousedown\")) {\n            editableCell.row = null;\n            editableCell.column = null;\n        } else {\n            editableCell.row = row;\n            editableCell.column = column;\n            selectedCell.row[0] = row;\n            selectedCell.column[0] = column;\n        }\n        selectedCell.row[1] = row;\n        selectedCell.column[1] = column;\n        this.setState({\n            showCopied: false,\n            editableCell,\n            selectedCell\n        });\n    }\n\n    addRow() {\n        const sheet = [...this.state.sheet];\n        sheet.push(new Array(this.state.column).fill(\"\"));\n        this.setState({\n            row: this.state.row + 1,\n            sheet\n        });\n    }\n\n    addColumn() {\n        const sheet = [...this.state.sheet];\n        sheet.forEach(row => row.push(\"\"));\n        this.setState({\n            column: this.state.column + 1,\n            sheet\n        });\n    }\n\n    handleKeyEvents(e) {\n        const selectedCell = this.state.selectedCell;\n        if(e.key === 'c' && e.ctrlKey) {\n            if(selectedCell.row.length > 0) {\n                const sortSelectRows = [...selectedCell.row].sort();\n                const sortSelectColumns = [...selectedCell.column].sort();\n                const clipboard = [];\n                    // new Array(sortSelectRows[1] - sortSelectRows[0] + 1)\n                    // .fill(\"\")\n                    // .map(row => new Array(sortSelectColumns[1] - sortSelectColumns[0]));\n                for(let i = sortSelectRows[0]; i <= sortSelectRows[1]; i++) {\n                    const row = [];\n                    for(let j = sortSelectColumns[0]; j <= sortSelectColumns[1]; j++) {\n                        row.push(this.state.sheet[i][j]);\n                    }\n                    clipboard.push(row);\n                }\n                this.setState({\n                    showCopied: true,\n                    clipboard\n                });\n            }\n        } else if(e.key === 'v' && e.ctrlKey) {\n            if(this.state.clipboard) {\n                this.pasteData();\n                e.preventDefault();\n            }\n        } else if(e.key === 'Tab') {\n            this.setState({isSelectionMode: false});\n        } else if(e.key === 'ArrowLeft') {\n            if(selectedCell.column[1] > 0) {\n                this.onClick(selectedCell.row[1], selectedCell.column[1] - 1, e);\n            }\n        } else if(e.key === 'ArrowRight') {\n            if(selectedCell.column[1] < this.state.column - 1) {\n                this.onClick(selectedCell.row[1], selectedCell.column[1] + 1, e);\n            }\n        } else if(e.key === 'ArrowUp') {\n            if(selectedCell.row[1] > 0) {\n                this.onClick(selectedCell.row[1] - 1, selectedCell.column[1], e);\n            }\n        } else if(e.key === 'ArrowDown') {\n            if(selectedCell.row[1] < this.state.row - 1) {\n                this.onClick(selectedCell.row[1] + 1, selectedCell.column[1], e);\n            }\n        }\n    }\n\n    pasteData() {\n        const { clipboard, selectedCell, row, column } = this.state;\n        const targetRow = selectedCell.row[0];\n        const targetColumn = selectedCell.column[0];\n        const newRowsRequired = targetRow + clipboard.length - row;\n        const newColumnsRequired = targetColumn + clipboard[0].length - column;\n        const sheet = [...this.state.sheet];\n        // this.setState({sheet});\n        this.increaseSpreadSheet(newRowsRequired, sheet, 'row');\n        this.increaseSpreadSheet(newColumnsRequired, sheet, 'column');\n        for(let row = 0; row < clipboard.length; row++) {\n            for(let column = 0; column < clipboard[0].length; column++) {\n                sheet[row + targetRow][column + targetColumn] = clipboard[row][column];\n            }\n        }\n        this.setState({\n            sheet,\n            row: row + (newRowsRequired > 0 ? newRowsRequired : 0),\n            column: column + (newColumnsRequired > 0 ? newColumnsRequired : 0),\n            editableCell: {\n                row: null,\n                column: null\n            }\n        })\n    }\n\n    increaseSpreadSheet(count, sheet, type) {\n        if(count > 0) {\n            for(let i = 0; i < count; i++) {\n                if(type === 'row')\n                    sheet.push(new Array(sheet[0].length).fill(\"\"));\n                else\n                    sheet.forEach(row => row.push(\"\"));\n            }\n        }\n        return sheet;\n    }\n\n    render() {\n        const { sheet, column, editableCell, selectedCell, showCopied } = this.state;\n        return <div style={{width: this.state.column * 103 + 60}}>\n            {\n                <Row row={new Array(column).fill('')}\n                     onMouseEnter={() => {}}\n                     onClick={() => {}}\n                     selectedCell={selectedCell}\n                     onAdd={this.addColumn.bind(this)}\n                     isHeader />\n            }\n            {\n                sheet.map((row, index) => <Row key={index}\n                                               row={row}\n                                               showCopied={showCopied}\n                                               rowIndex={index}\n                                               editableCell={editableCell}\n                                               selectedCell={selectedCell}\n                                               onMouseEnter={this.onMouseEnter.bind(this)}\n                                               onChange={this.onChange.bind(this)}\n                                               onClick={this.onClick.bind(this)} />)\n            }\n            <AddNew onClick={this.addRow.bind(this)} />\n        </div>\n    }\n\n}\n","import './App.css';\nimport React from 'react';\nimport Spreadsheet from './container/SpreadSheet';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Spreadsheet row={5}\n                         column={5} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}